import java.util.LinkedList;
import java.util.Queue;
import java.util.concurrent.Semaphore;

class ProducerConsumer {
    static Semaphore mutex = new Semaphore(1);
    static Semaphore empty = new Semaphore(5);
    static Semaphore full = new Semaphore(0);
    static Queue<Integer> buffer = new LinkedList<>();

    static class Producer extends Thread {
        public void run() {
            try {
                int item = 0;
                while (true) {
                    empty.acquire();
                    mutex.acquire();
                    buffer.add(item);
                    System.out.println("Producer produced: " + item);
                    item++;
                    mutex.release();
                    full.release();
                    Thread.sleep(500);
                }
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    static class Consumer extends Thread {
        public void run() {
            try {
                while (true) {
                    full.acquire();
                    mutex.acquire();
                    int item = buffer.poll();
                    System.out.println("Consumer consumed: " + item);
                    mutex.release();
                    empty.release();
                    Thread.sleep(1000);
                }
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    public static void main(String[] args) {
        new Producer().start();
        new Consumer().start();
    }
}
